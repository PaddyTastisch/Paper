From 82f6d202cbdcce2e1e031a39671e43e0fc83e372 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 18 Jan 2018 01:00:27 -0500
Subject: [PATCH] Optimize Hoppers with Plugin Heuristics

Use Heuristics on plugin behavior to detect potential intent of plugins using InventoryMoveItemEvent.

Mode 2:
If the plugin appears to only be checking the source/target inventory, IE to determine protection
concepts to cancel the event, then we can greatly reduce the number of event fires for IMIE
by only firing IMIE on the first event item attempted to be moved by a hopper.

Because the plugin doesn't access the item, then there is no reason to fire the event again
as the results should continue to be the same.

The only risk here is if the plugin was maintaining its own state and conditionally changed cancel behavior
based on that state, which is extremely unlikely.

Mode 3:
If no plugins are listening, we can go to an even more cleaner code path with no event fires.
This also will let server owners ignore plugins listening to it if they dont wish to let a
plugin ever cancel a hopper move.

Mode 0:
Standard CraftBukkit processing, however we have now made great optimizations to this code
so even mode 0 should be significantly faster than Spigot.

Mode 1: Auto detects if mode 2 or 3 is safe, else falls back to 0.

diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
index 06ec99ae..b44cc45b 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -30,6 +30,8 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
     private final Inventory destinationInventory;
     private ItemStack itemStack;
     private final boolean didSourceInitiate;
+    public boolean calledGetItem; // Paper
+    public boolean calledSetItem; // Paper
 
     public InventoryMoveItemEvent(final Inventory sourceInventory, final ItemStack itemStack, final Inventory destinationInventory, final boolean didSourceInitiate) {
         Validate.notNull(itemStack, "ItemStack cannot be null");
@@ -55,7 +57,8 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
      * @return ItemStack
      */
     public ItemStack getItem() {
-        return itemStack.clone();
+        calledGetItem = true; // Paper - record this method was used for auto detection of mode
+        return itemStack; // Paper - Removed clone, handled better in Server
     }
 
     /**
@@ -67,6 +70,7 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
      */
     public void setItem(ItemStack itemStack) {
         Validate.notNull(itemStack, "ItemStack cannot be null.  Cancel the event if you want nothing to be transferred.");
+        calledSetItem = true; // Paper - record this method was used for auto detection of mode
         this.itemStack = itemStack.clone();
     }
 
-- 
2.15.1

